import streamlit as st

from src.predictor import RiskPredictor
from src.recommendation_engine import RecommendationEngine


def load_engines():
    predictor = RiskPredictor()
    engine = RecommendationEngine()
    return predictor, engine
predictor, engine = load_engines()


def display_recommendations(metric_name, level, recs):
    if recs:
        with st.expander(f"Xem th√™m g·ª£i √Ω cho {metric_name} (M·ª©c ƒë·ªô: {level.upper()})"):
            st.markdown(f"**M√¥ t·∫£:** {recs['mo_ta']}")

            if 'goi_y_bai_tap' in recs:
                st.markdown("---")
                st.subheader("üèãÔ∏è B√ÄI T·∫¨P G·ª¢I √ù")
                for ex_type in recs['goi_y_bai_tap']:
                    st.markdown(f"**- {ex_type['loai_bai_tap']}:**")
                    for detail in ex_type['chi_tiet']:
                        st.markdown(f"  + {detail}")

            if 'che_do_dinh_duong' in recs:
                st.markdown("---")
                st.subheader("ü•ó CH·∫æ ƒê·ªò DINH D∆Ø·ª†NG")
                nutrition = recs['che_do_dinh_duong']
                st.markdown(f"**Nguy√™n t·∫Øc chung:** {nutrition['nguyen_tac_chung']}")
                if "nen_an" in nutrition and nutrition["nen_an"]:
                    st.markdown(f"**N√™n ƒÉn:** {', '.join(nutrition['nen_an'])}")
                if "nen_han_che" in nutrition and nutrition["nen_han_che"]:
                    st.markdown(f"**N√™n h·∫°n ch·∫ø:** {', '.join(nutrition['nen_han_che'])}")

            if 'loi_song_sinh_hoat' in recs:
                st.markdown("---")
                st.subheader("üèÉ L·ªêI S·ªêNG SINH HO·∫†T")
                lifestyle = recs['loi_song_sinh_hoat']
                st.markdown(f"**Gi·∫•c ng·ªß:** {lifestyle['giac_ngu']}")
                st.markdown(f"**CƒÉng th·∫≥ng:** {lifestyle['quan_ly_cang_thang']}")
                if "thoi_quen_khac" in lifestyle and lifestyle["thoi_quen_khac"]:
                    st.markdown("**Th√≥i quen kh√°c:**")
                    for habit in lifestyle['thoi_quen_khac']:
                        st.markdown(f"- {habit}")


st.set_page_config(page_title = "Health Advice AI", layout = "wide")
st.title("TR·ª¢ L√ù PH√ÇN T√çCH S·ª®C KHO·∫∫ üë®üèª‚Äç‚öïÔ∏è")

st.markdown("""
<style>
    div[data-testid="stAlert"] svg {
        display: none;
    }

    div[data-testid="stAlert"] {
        display: flex;
        align-items: center;
    }

    div[data-testid="stAlert"] h3 {
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

st.sidebar.header("Nh·∫≠p ch·ªâ s·ªë c·ªßa b·∫°n")
sex = st.sidebar.selectbox("Gi·ªõi t√≠nh", (1, 0), format_func=lambda x: "Nam" if x == 1 else "N·ªØ")
bmi = st.sidebar.number_input("BMI", min_value=10.0, max_value=50.0, value=22.0, step=0.1)
uric_acid = st.sidebar.number_input("Acid Uric (¬µmol/L)", min_value=100.0, max_value=1000.0, value=350.0, step=10.0)
cholesterol = st.sidebar.number_input("Cholesterol (mmol/L)", min_value=1.0, max_value=15.0, value=5.0, step=0.1)

if st.sidebar.button("PH√ÇN T√çCH"):
    if predictor.model is None or engine.recommendations is None:
        st.error("L·ªói: KH√îNG TH·ªÇ ƒê∆ØA RA G·ª¢I √ù.")
    else:
        user_data = {
            "sex": sex, "BMI": bmi,
            "TC (cholesterol)": cholesterol, "UA (uric acid)": uric_acid
        }
        overall_risk = predictor.predict_risk(user_data)

        st.header("T√¨nh tr·∫°ng s·ª©c kh·ªèe t·ªïng quan")
        col1, col2 = st.columns([1, 1])
        with col1:
            if overall_risk == "Th·∫•p":
                st.success(f"#### M·ª©c ƒë·ªô: {overall_risk.upper()}")
            elif overall_risk == "Trung b√¨nh":
                st.warning(f"#### M·ª©c ƒë·ªô: {overall_risk.upper()}")
            else:  # Nguy c∆° Cao
                st.error(f"#### M·ª©c ƒë·ªô: {overall_risk.upper()}")

        st.markdown("---")

        st.header("G·ª£i √Ω r√®n luy·ªán v√† l·ªëi s·ªëng üîé")

        bmi_level = engine.classify_bmi(bmi)
        bmi_recs = engine.get_specific_recommendations("BMI", bmi_level)
        display_recommendations("BMI", bmi_level, bmi_recs)

        uric_acid_level = engine.classify_uric_acid(uric_acid, sex)
        uric_acid_recs = engine.get_specific_recommendations("UricAcid", uric_acid_level)
        display_recommendations("UricAcid", uric_acid_level, uric_acid_recs)

        cholesterol_level = engine.classify_cholesterol(cholesterol)
        cholesterol_recs = engine.get_specific_recommendations("Cholesterol", cholesterol_level)
        display_recommendations("Cholesterol", cholesterol_level, cholesterol_recs)

        st.markdown("---")
        if "Disclaimer" in engine.recommendations:
            st.warning(f"**L∆∞u √Ω:** {engine.recommendations['Disclaimer']}")
else:
    st.info("Vui l√≤ng nh·∫≠p c√°c ch·ªâ s·ªë v√†o thanh b√™n tr√°i v√† nh·∫•n n√∫t 'Ph√¢n T√≠ch'.")